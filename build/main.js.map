{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\nimport mqtt, { MqttClient } from 'mqtt';\nimport MqttPattern from 'mqtt-pattern';\n\nclass AlexaBuddy extends utils.Adapter {\n    static requestPattern = 'request/user/+user_id/+datapoint/+op';\n\n    private mqttClient?: MqttClient;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'alexa-buddy',\n        });\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private async onReady(): Promise<void> {\n        const url = this.config.mqttServer;\n        this.log.info(`Connecting to mqtt-server: ${url}...`);\n\n        this.mqttClient = mqtt.connect(url, {\n            protocolVersion: 5,\n        });\n\n        this.mqttClient.on('error', (err) => {\n            this.log.error(err.message);\n        });\n\n        this.mqttClient.on('connect', this.mqttReady.bind(this));\n        this.mqttClient.on('message', this.mqttMessageReceived.bind(this));\n    }\n\n    private mqttReady(): void {\n        const userId = this.config.userId;\n        const requestTopic = `request/user/${userId}/#`;\n        this.log.info(`Subcribing to ${requestTopic}...`);\n\n        this.mqttClient?.subscribe('request/#', {\n            qos: 1,\n        });\n    }\n\n    private async mqttMessageReceived(topic: string, payload: any, packet: any): Promise<void> {\n        if (!packet.properties) {\n            this.log.warn('No packet properties - ignoring message');\n            return;\n        }\n\n        this.log.debug(`Message received. Topic: ${topic}, Payload: ${payload}`);\n\n        const params: any = MqttPattern.exec(AlexaBuddy.requestPattern, topic);\n\n        const responseTopic = packet.properties.responseTopic;\n        const corrData = packet.properties.correlationData?.toString();\n        const publishOptions = {\n            properties: {\n                correlationData: Buffer.from(corrData, 'utf-8'),\n            },\n        };\n\n        if (params.op === 'get-state') {\n            this.getForeignState(params.datapoint, (err?: Error | null, state?: ioBroker.State | null) => {\n                const response: any = { code: 'OK' };\n                if (err) {\n                    response.code = 'ERROR';\n                    response.message = err.message;\n                } else {\n                    response.state = state;\n                }\n                this.mqttClient?.publish(responseTopic, JSON.stringify(response), publishOptions);\n            });\n        } else if (params.op === 'set-state') {\n            const desiredState = JSON.parse(payload);\n            this.setForeignStateChanged(\n                params.datapoint,\n                { val: desiredState.val, ack: false },\n                (err: Error | null, _id: string, notChanged: boolean) => {\n                    const response: any = { code: 'OK' };\n                    if (err) {\n                        response.code = 'ERROR';\n                        response.message = err.message;\n                    } else if (notChanged) {\n                        response.code = 'IGNORED';\n                    }\n                    this.mqttClient?.publish(responseTopic, JSON.stringify(response), publishOptions);\n                },\n            );\n        }\n    }\n\n    private onUnload(callback: () => void): void {\n        this.mqttClient\n            ?.endAsync()\n            .then(() => callback())\n            .catch(() => callback());\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new AlexaBuddy(options);\n} else {\n    // otherwise start the instance directly\n    (() => new AlexaBuddy())();\n}\n"],
  "mappings": "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",
  "names": ["mqtt", "MqttPattern", "_a"]
}
